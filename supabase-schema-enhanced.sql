-- ============================================
-- Enhanced Schema for ChatGPT-like Application
-- ============================================

-- Create an ENUM type for user status
CREATE TYPE public.user_status AS ENUM ('unauthorized', 'free', 'paid');

-- Create a table for public user profiles
CREATE TABLE public.profiles (
  id UUID NOT NULL REFERENCES auth.users ON DELETE CASCADE,
  username TEXT,
  avatar_url TEXT,
  status public.user_status NOT NULL DEFAULT 'unauthorized',
  updated_at TIMESTAMPTZ DEFAULT NOW(),

  PRIMARY KEY (id)
);

-- Create a table for conversations with title and tracking
CREATE TABLE public.conversations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY,
  user_id UUID NOT NULL REFERENCES public.profiles ON DELETE CASCADE,
  title TEXT, -- Auto-generated from first message or user-defined
  updated_at TIMESTAMPTZ DEFAULT NOW(), -- Updated via trigger when messages added
  created_at TIMESTAMPTZ DEFAULT NOW(),

  PRIMARY KEY (id)
);

-- Create an ENUM type for message sender
CREATE TYPE public.message_sender AS ENUM ('user', 'ai');

-- Create a table for messages
CREATE TABLE public.messages (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY,
  conversation_id BIGINT NOT NULL REFERENCES public.conversations ON DELETE CASCADE,
  content TEXT NOT NULL,
  sender public.message_sender NOT NULL,
  metadata JSONB, -- For additional context, attachments, etc.
  created_at TIMESTAMPTZ DEFAULT NOW(),

  PRIMARY KEY (id)
);

-- Create a table for message usage tracking (tokens, costs, model info)
CREATE TABLE public.message_usage (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY,
  message_id BIGINT NOT NULL REFERENCES public.messages ON DELETE CASCADE,
  model_name TEXT, -- e.g., "gpt-4", "claude-sonnet-3.5"
  prompt_tokens INTEGER,
  completion_tokens INTEGER,
  total_tokens INTEGER,
  estimated_cost NUMERIC(10, 6), -- Store in dollars with 6 decimal precision
  created_at TIMESTAMPTZ DEFAULT NOW(),

  PRIMARY KEY (id),
  UNIQUE (message_id) -- One usage record per message
);

-- Create a table for conversation sharing (read-only links)
CREATE TABLE public.conversation_shares (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY,
  conversation_id BIGINT NOT NULL REFERENCES public.conversations ON DELETE CASCADE,
  share_token TEXT NOT NULL UNIQUE, -- UUID or nanoid for share URLs
  created_by UUID NOT NULL REFERENCES public.profiles ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  expires_at TIMESTAMPTZ, -- NULL = never expires

  PRIMARY KEY (id)
);

-- ============================================
-- Indexes for Performance
-- ============================================

-- Messages indexes (for efficient conversation loading)
CREATE INDEX idx_messages_conversation_id ON public.messages(conversation_id);
CREATE INDEX idx_messages_conversation_created ON public.messages(conversation_id, created_at);

-- Conversations indexes (for efficient user conversation list)
CREATE INDEX idx_conversations_user_id ON public.conversations(user_id);
CREATE INDEX idx_conversations_user_updated ON public.conversations(user_id, updated_at DESC);

-- Message usage index
CREATE INDEX idx_message_usage_message_id ON public.message_usage(message_id);

-- Conversation shares index (for fast share link lookups)
CREATE INDEX idx_conversation_shares_token ON public.conversation_shares(share_token);
CREATE INDEX idx_conversation_shares_conversation ON public.conversation_shares(conversation_id);

-- ============================================
-- Triggers
-- ============================================

-- Function to update conversation.updated_at when a new message is added
CREATE OR REPLACE FUNCTION public.update_conversation_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE public.conversations
  SET updated_at = NOW()
  WHERE id = NEW.conversation_id;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to call the function after message insert
CREATE TRIGGER trigger_update_conversation_updated_at
AFTER INSERT ON public.messages
FOR EACH ROW
EXECUTE FUNCTION public.update_conversation_updated_at();

-- ============================================
-- Row Level Security (RLS)
-- ============================================

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.conversations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.message_usage ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.conversation_shares ENABLE ROW LEVEL SECURITY;

-- ============================================
-- RLS Policies for Profiles
-- ============================================

CREATE POLICY "Public profiles are viewable by everyone."
  ON public.profiles FOR SELECT
  USING (true);

CREATE POLICY "Users can insert their own profile."
  ON public.profiles FOR INSERT
  WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update their own profile."
  ON public.profiles FOR UPDATE
  USING (auth.uid() = id);

-- ============================================
-- RLS Policies for Conversations
-- ============================================

CREATE POLICY "Users can view their own conversations."
  ON public.conversations FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can view shared conversations."
  ON public.conversations FOR SELECT
  USING (
    EXISTS (
      SELECT 1
      FROM public.conversation_shares
      WHERE conversation_shares.conversation_id = conversations.id
        AND (conversation_shares.expires_at IS NULL OR conversation_shares.expires_at > NOW())
    )
  );

CREATE POLICY "Users can create their own conversations."
  ON public.conversations FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own conversations."
  ON public.conversations FOR UPDATE
  USING (auth.uid() = user_id);

-- ============================================
-- RLS Policies for Messages
-- ============================================

CREATE POLICY "Users can view messages in their own conversations."
  ON public.messages FOR SELECT
  USING (
    EXISTS (
      SELECT 1
      FROM public.conversations
      WHERE conversations.id = messages.conversation_id
        AND conversations.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can view messages in shared conversations."
  ON public.messages FOR SELECT
  USING (
    EXISTS (
      SELECT 1
      FROM public.conversation_shares cs
      JOIN public.conversations c ON c.id = cs.conversation_id
      WHERE c.id = messages.conversation_id
        AND (cs.expires_at IS NULL OR cs.expires_at > NOW())
    )
  );

CREATE POLICY "Users can insert messages into their own conversations."
  ON public.messages FOR INSERT
  WITH CHECK (
    EXISTS (
      SELECT 1
      FROM public.conversations
      WHERE conversations.id = messages.conversation_id
        AND conversations.user_id = auth.uid()
    )
  );

-- ============================================
-- RLS Policies for Message Usage
-- ============================================

CREATE POLICY "Users can view usage for their own messages."
  ON public.message_usage FOR SELECT
  USING (
    EXISTS (
      SELECT 1
      FROM public.messages m
      JOIN public.conversations c ON c.id = m.conversation_id
      WHERE m.id = message_usage.message_id
        AND c.user_id = auth.uid()
    )
  );

CREATE POLICY "System can insert usage records."
  ON public.message_usage FOR INSERT
  WITH CHECK (true); -- Typically inserted by backend service

-- ============================================
-- RLS Policies for Conversation Shares
-- ============================================

CREATE POLICY "Users can view shares for their own conversations."
  ON public.conversation_shares FOR SELECT
  USING (auth.uid() = created_by);

CREATE POLICY "Anyone can view valid shares by token."
  ON public.conversation_shares FOR SELECT
  USING (
    expires_at IS NULL OR expires_at > NOW()
  );

CREATE POLICY "Users can create shares for their own conversations."
  ON public.conversation_shares FOR INSERT
  WITH CHECK (
    auth.uid() = created_by
    AND EXISTS (
      SELECT 1
      FROM public.conversations
      WHERE conversations.id = conversation_shares.conversation_id
        AND conversations.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can delete their own shares."
  ON public.conversation_shares FOR DELETE
  USING (auth.uid() = created_by);

-- ============================================
-- Enable Realtime
-- ============================================

-- Enable Realtime for the messages table
ALTER PUBLICATION supabase_realtime ADD TABLE public.messages;

-- Optionally enable realtime for conversations (to update titles, updated_at)
ALTER PUBLICATION supabase_realtime ADD TABLE public.conversations;
